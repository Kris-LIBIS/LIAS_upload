<div class="upload_info">
  <h1>Upload to <%= upload.name %></h1>

  <p>
    <b>User: </b>
    <% if upload.user %>
      <%= upload.user.name %>
    <% else %>
      <%= " ------ " %>
    <% end %>
  </p>

  <p>
    <b>Date: </b>
    <%= upload.date %>
  </p>
</div>

<%= link_to 'Edit', edit_upload_path(upload) %>
<% if upload.status == 1 %>
  - Drag and drop files or directories on the table below to upload files.
<!--| <%#= link_to 'Add files', uploads_add_files_path(upload) %>-->
<% end %>

<div class="upload_files">

  <h3>Uploaded files:</h3>

  <table class="tablesorter" id="files_table">
    <thead>

    <tr>
      <th>File path</th>
      <th>Mimetype</th>
      <th>Actions</th>
      <th>Selected</th>
    </tr>

    </thead>

    <tbody>
    <%= render(upload.uploaded_files) %>
    </tbody>

    <tfoot>
    <tr>
      <td colspan="20">
        <%= paging_tags('files_table', 0 => :rsort, 2 => :nosort, 3 => :nosort) %>
      </td>
    </tr>
    </tfoot>

  </table>
</div>

<script type="application/javascript">
  var dragAndDropModule = new qq.DragAndDrop({
      dropZoneElements: [document.getElementById('files_table')],
      classes: {
          dropActive: "cssClassToAddToDropZoneOnEnter"
      },
      callbacks: {
          processingDropppedFiles: function() {
              //TODO: processing ...
          },
          processingDroppedFilesComplete: function(files, dropTarget) {
              //TODO: preprocess
              fineUploaderBasicInstance.addFiles(files);
          }
      },
  }),
      fineUploaderBasicInstance = new qq.FineUploaderBasic({
          debug: true,
          request: {
              endpoint: '/file_upload',
              params: {
                  upload_id: <%= upload.id %>
              },
              inputName: 'file_data',
              filenameParam: 'file_name',
              uuidName: 'uuid',
              totalFileSizeName: 'total_size',
              customHeaders: {
                  Authorization: 'Basic a3JpczpyRkQ1ZCUwNg=='

              }
          },
          chunking: {
              enabled: true,
              partSize: 100000,
              paramNames: {
                  chunkSize: 'chunk_size',
                  partByteOffset: 'part_offset',
                  partIndex: 'part_index',
                  totalParts: 'total_parts'
              }
          }
      })

</script>